{"version":3,"sources":["App.js","serviceWorker.js","sum.js","async.js","example.js","index.js"],"names":["App","render","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","sumValues","values","reduce","total","val","asyncAdd","Promise","callback","setTimeout","console","log","concat","_callee","regenerator_default","wrap","_context","prev","next","sent","stop","this","doTask","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAEqBA,6MAEjBC,OAAS,kBACLC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBAErBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iDAVAC,aCUbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4FClBC,SAASC,EAAWC,GACvB,OAAOA,EAAOC,OAAO,SAACC,EAAOC,GAAR,OAAgBD,EAAQC,GAAK,GCC/C,SAASC,EAASJ,GACrB,OAAO,IAAIK,QAAQ,SAAAC,GAAQ,OACvBC,WAAW,WACP,IAAIL,EAAQH,EAAUC,GACtBQ,QAAQC,IAAR,gBAAAC,OAA4BR,IAC5BI,EAASJ,IACV,OCNX,IAAIF,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,+CAE9B,SAAAW,IAAA,IAAAT,EAAA,OAAAU,EAAAtB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACsBZ,EAASJ,GAD/B,OACQE,EADRY,EAAAG,KAEIT,QAAQC,IAAR,eAAAC,OAA2BR,IAF/B,wBAAAY,EAAAI,SAAAP,EAAAQ,oEAKAC,GCAAC,IAASjC,OAAOC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SJwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e30ee2ac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class App extends Component {\n\n    render = () => \n        <div className=\"m-2\">\n            <div className=\"form-group\">\n                <label>Name:</label>\n                <input className=\"form-control\" />\n            </div>\n            <div className=\"form-group\">\n                <label>City:</label>\n                <input className=\"form-control\" />\n            </div>            \n        </div>        \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function sumValues (values) {\n    return values.reduce((total, val) => total + val, 0);\n}\n\nexport default function sumOdd(values) {\n    return sumValues(values.filter((item, index) => index % 2 === 0));\n}\n","import { sumValues } from \"./sum\";\n\nexport function asyncAdd(values) {\n    return new Promise(callback =>\n        setTimeout(() => {\n            let total = sumValues(values);\n            console.log(`Async Total: ${total}`);\n            callback(total);\n        }, 500));\n}\n","import { asyncAdd } from \"./async\";\n\nlet values = [10, 20, 30, 40, 50];\n\nasync function doTask() {\n    let total = await asyncAdd(values);\n    console.log(`Main Total: ${total}`);\n}\n\ndoTask();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport \"./example\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}